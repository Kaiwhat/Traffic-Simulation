import numpy as np
from trafficSim import *
import csv

sim = Simulation()

# Play with these
l = 100     # Length of road
n = 15

NUM_OF_ROADS = 63 # Number of roads
VEHICLE_RATE = 200 # Vehicle spawn rate per minute
STEPS_PER_UPDATE = 1   # Number of steps per update

C1_RIGHT = (-50, -52)
C1_LEFT = (50, -56)
C2_RIGHT = (52, -50)
C2_LEFT = (56, 50)
C3_RIGHT = (50, 52)
C3_LEFT = (-50, 56)
C4_RIGHT = (-52, 50)
C4_LEFT = (-56, -50)

E1_RIGHT = (160, -158) # (160, -158)
E1_LEFT = (164, -58) # (164, -58)
E2_RIGHT = (E1_RIGHT[0], E1_RIGHT[1]+(l+8)) # (160, -50)
E2_LEFT = (E1_LEFT[0], E1_LEFT[1]+(l+8)) # (164, 50)
E3_RIGHT = (E2_RIGHT[0], E2_RIGHT[1]+(l+8)) # (160, 58)
E3_LEFT = (E2_LEFT[0], E2_LEFT[1]+(l+8)) # (164, 158)

S1_RIGHT = (158, 160)
S1_LEFT = (58, 164)
S2_RIGHT = (S1_RIGHT[0]-(l+8), S1_RIGHT[1]) # (50, 160)
S2_LEFT = (S1_LEFT[0]-(l+8)*2, S1_LEFT[1]) # (-158, 164)

W1_RIGHT = (-160, -58)
W1_LEFT = (-164, -158)
W2_RIGHT = (W1_RIGHT[0], W1_RIGHT[1]+(l+8)) # (-160, 50)
W2_LEFT = (W1_LEFT[0], W1_LEFT[1]+(l+8)) # (-164, -50)
W3_RIGHT = (W2_RIGHT[0], W2_RIGHT[1]+(l+8)) # (-160, 158)
W3_LEFT = (W2_LEFT[0], W2_LEFT[1]+(l+8)) # (-164, 58)

N1_RIGHT = (-50, -160) # (-50, -160)
N1_LEFT = (158, N1_RIGHT[1]-4) # (158, -164)
N2_RIGHT = (N1_RIGHT[0]-(l+8), N1_RIGHT[1]) # (-158, -160)
N2_LEFT = (N1_LEFT[0]-(l+8)*2, N1_LEFT[1]) # (-58, -164)

EC1_RIGHT = (C1_RIGHT[0]+(l+8), C1_RIGHT[1]) # (58, -52)
EC1_LEFT = (C1_LEFT[0]+(l+8), C1_LEFT[1]) # (158, -56)
EC2_RIGHT = (C3_RIGHT[0]+(l+8), C3_RIGHT[1]) # (158, 52)
EC2_LEFT = (C3_LEFT[0]+(l+8), C3_LEFT[1]) # (58, 56)

SC_RIGHT = (C2_RIGHT[0], C2_RIGHT[1]+(l+8)) # (52, 58)
SC_LEFT = (C2_LEFT[0], C2_LEFT[1]+(l+8)) # (56, 158)

WC1_RIGHT = (C1_RIGHT[0]-(l+8), C1_RIGHT[1]) # (-158, -52)
WC1_LEFT = (C1_LEFT[0]-(l+8), C1_LEFT[1]) # (-58, -56)
WC2_RIGHT = (C3_RIGHT[0]-(l+8), C3_RIGHT[1]) # (-58, 52)
WC2_LEFT = (C3_LEFT[0]-(l+8), C3_LEFT[1]) # (-158, 56)

NC_RIGHT = (C4_RIGHT[0], C4_RIGHT[1]-(l+8)) # (-52, -58)
NC_LEFT = (C4_LEFT[0], C4_LEFT[1]-(l+8)) # (-56, -158)

# ROADS END----------------------------------------------

C1_RIGHT_END = (C1_RIGHT[0]+l, C1_RIGHT[1])
C1_LEFT_END = (C1_LEFT[0]-l, C1_LEFT[1])
C2_RIGHT_END = (C2_RIGHT[0], C2_RIGHT[1]+l)
C2_LEFT_END = (C2_LEFT[0], C2_LEFT[1]-l)
C3_RIGHT_END = (C3_RIGHT[0]-l, C3_RIGHT[1])
C3_LEFT_END = (C3_LEFT[0]+l, C3_LEFT[1])
C4_RIGHT_END = (C4_RIGHT[0], C4_RIGHT[1]-l)
C4_LEFT_END = (C4_LEFT[0], C4_LEFT[1]+l)

E1_RIGHT_END = (E1_RIGHT[0], E1_RIGHT[1]+l)
E1_LEFT_END = (E1_LEFT[0], E1_LEFT[1]-l)
E2_RIGHT_END = (E2_RIGHT[0], E2_RIGHT[1]+l)
E2_LEFT_END = (E2_LEFT[0], E2_LEFT[1]-l)
E3_RIGHT_END = (E3_RIGHT[0], E3_RIGHT[1]+l)
E3_LEFT_END = (E3_LEFT[0], E3_LEFT[1]-l)

S1_RIGHT_END = (S1_RIGHT[0]-l, S1_RIGHT[1])
S1_LEFT_END = (S1_LEFT[0]+l, S1_LEFT[1])
S2_RIGHT_END = (S2_RIGHT[0]-l*2-8, S2_RIGHT[1])
S2_LEFT_END = (S2_LEFT[0]+l*2+8, S2_LEFT[1])

W1_RIGHT_END = (W1_RIGHT[0], W1_RIGHT[1]-l)
W1_LEFT_END = (W1_LEFT[0], W1_LEFT[1]+l)
W2_RIGHT_END = (W2_RIGHT[0], W2_RIGHT[1]-l)
W2_LEFT_END = (W2_LEFT[0], W2_LEFT[1]+l)
W3_RIGHT_END = (W3_RIGHT[0], W3_RIGHT[1]-l)
W3_LEFT_END = (W3_LEFT[0], W3_LEFT[1]+l)

N1_RIGHT_END = (N1_RIGHT[0]+l*2+8, N1_RIGHT[1])
N1_LEFT_END = (N1_LEFT[0]-l*2-8, N1_LEFT[1])
N2_RIGHT_END = (N2_RIGHT[0]+l, N2_RIGHT[1])
N2_LEFT_END = (N2_LEFT[0]-l, N2_LEFT[1])

EC1_RIGHT_END = (EC1_RIGHT[0]+l, EC1_RIGHT[1])
EC1_LEFT_END = (EC1_LEFT[0]-l, EC1_LEFT[1])
EC2_RIGHT_END = (EC2_RIGHT[0]-l, EC2_RIGHT[1])
EC2_LEFT_END = (EC2_LEFT[0]+l, EC2_LEFT[1])

SC_RIGHT_END = (SC_RIGHT[0], SC_RIGHT[1]+l)
SC_LEFT_END = (SC_LEFT[0], SC_LEFT[1]-l)

WC1_RIGHT_END = (WC1_RIGHT[0]+l, WC1_RIGHT[1])
WC1_LEFT_END = (WC1_LEFT[0]-l, WC1_LEFT[1])
WC2_RIGHT_END = (WC2_RIGHT[0]-l, WC2_RIGHT[1])
WC2_LEFT_END = (WC2_LEFT[0]+l, WC2_LEFT[1])

NC_RIGHT_END = (NC_RIGHT[0], NC_RIGHT[1]-l)
NC_LEFT_END = (NC_LEFT[0], NC_LEFT[1]+l)

# Inbound roads----------------------------------------------

C1_INBOUND = (C1_RIGHT, C1_RIGHT_END)
C2_INBOUND = (C2_RIGHT, C2_RIGHT_END)
C3_INBOUND = (C3_RIGHT, C3_RIGHT_END)
C4_INBOUND = (C4_RIGHT, C4_RIGHT_END)

E1_INBOUND = (E1_RIGHT, E1_RIGHT_END)
E2_INBOUND = (E2_RIGHT, E2_RIGHT_END)
E3_INBOUND = (E3_RIGHT, E3_RIGHT_END)

S1_INBOUND = (S1_RIGHT, S1_RIGHT_END)
S2_INBOUND = (S2_RIGHT, S2_RIGHT_END)

W1_INBOUND = (W1_RIGHT, W1_RIGHT_END)
W2_INBOUND = (W2_RIGHT, W2_RIGHT_END)
W3_INBOUND = (W3_RIGHT, W3_RIGHT_END)

N1_INBOUND = (N1_RIGHT, N1_RIGHT_END)
N2_INBOUND = (N2_RIGHT, N2_RIGHT_END)

EC1_INBOUND = (EC1_RIGHT, EC1_RIGHT_END)
EC2_INBOUND = (EC2_RIGHT, EC2_RIGHT_END)

SC_INBOUND = (SC_RIGHT, SC_RIGHT_END)

WC1_INBOUND = (WC1_RIGHT, WC1_RIGHT_END)
WC2_INBOUND = (WC2_RIGHT, WC2_RIGHT_END)

NC_INBOUND = (NC_RIGHT, NC_RIGHT_END)

# Outbound roads----------------------------------------------

C1_OUTBOUND = (C1_LEFT, C1_LEFT_END)
C2_OUTBOUND = (C2_LEFT, C2_LEFT_END)
C3_OUTBOUND = (C3_LEFT, C3_LEFT_END)
C4_OUTBOUND = (C4_LEFT, C4_LEFT_END)

E1_OUTBOUND = (E1_LEFT, E1_LEFT_END)
E2_OUTBOUND = (E2_LEFT, E2_LEFT_END)
E3_OUTBOUND = (E3_LEFT, E3_LEFT_END)

S1_OUTBOUND = (S1_LEFT, S1_LEFT_END)
S2_OUTBOUND = (S2_LEFT, S2_LEFT_END)

W1_OUTBOUND = (W1_LEFT, W1_LEFT_END)
W2_OUTBOUND = (W2_LEFT, W2_LEFT_END)
W3_OUTBOUND = (W3_LEFT, W3_LEFT_END)

N1_OUTBOUND = (N1_LEFT, N1_LEFT_END)
N2_OUTBOUND = (N2_LEFT, N2_LEFT_END)

EC1_OUTBOUND = (EC1_LEFT, EC1_LEFT_END)
EC2_OUTBOUND = (EC2_LEFT, EC2_LEFT_END)

SC_OUTBOUND = (SC_LEFT, SC_LEFT_END)

WC1_OUTBOUND = (WC1_LEFT, WC1_LEFT_END)
WC2_OUTBOUND = (WC2_LEFT, WC2_LEFT_END)

NC_OUTBOUND = (NC_LEFT, NC_LEFT_END)

# Straight roads----------------------------------------------

E1E2_RIGHT_STRAIGHT = (E1_RIGHT_END, E2_RIGHT)
E2E3_RIGHT_STRAIGHT = (E2_RIGHT_END, E3_RIGHT)
S1S2_RIGHT_STRAIGHT = (S1_RIGHT_END, S2_RIGHT)
W3W2_RIGHT_STRAIGHT = (W3_RIGHT_END, W2_RIGHT)
W2W1_RIGHT_STRAIGHT = (W2_RIGHT_END, W1_RIGHT)
N2N1_RIGHT_STRAIGHT = (N2_RIGHT_END, N1_RIGHT)
C1EC1_RIGHT_STRAIGHT = (C1_RIGHT_END, EC1_RIGHT)
C2SC_RIGHT_STRAIGHT = (C2_RIGHT_END, SC_RIGHT)
C3WC2_RIGHT_STRAIGHT = (C3_RIGHT_END, WC2_RIGHT)
C4NC_RIGHT_STRAIGHT = (C4_RIGHT_END, NC_RIGHT)
EC2C3_RIGHT_STRAIGHT = (EC2_RIGHT_END, C3_RIGHT)
WC1C1_RIGHT_STRAIGHT = (WC1_RIGHT_END, C1_RIGHT)

NCC4_LEFT_STRAIGHT = (NC_LEFT_END, C4_LEFT)
E2E1_LEFT_STRAIGHT = (E2_LEFT_END, E1_LEFT)
E3E2_LEFT_STRAIGHT = (E3_LEFT_END, E2_LEFT)
S2S1_LEFT_STRAIGHT = (S2_LEFT_END, S1_LEFT)
W1W2_LEFT_STRAIGHT = (W1_LEFT_END, W2_LEFT)
W2W3_LEFT_STRAIGHT = (W2_LEFT_END, W3_LEFT)
N1N2_LEFT_STRAIGHT = (N1_LEFT_END, N2_LEFT)
C1WC1_LEFT_STRAIGHT = (C1_LEFT_END, WC1_LEFT)
C3EC2_LEFT_STRAIGHT = (C3_LEFT_END, EC2_LEFT)
EC1C1_LEFT_STRAIGHT = (EC1_LEFT_END, C1_LEFT)
WC2C3_LEFT_STRAIGHT = (WC2_LEFT_END, C3_LEFT)
SCC2_LEFT_STRAIGHT = (SC_LEFT_END, C2_LEFT)

# Turn right------------------------------

E1EC1_RIGHT_TURN = turn_road(E1_RIGHT_END, EC1_LEFT, TURN_RIGHT, n)
E2EC2_RIGHT_TURN = turn_road(E2_RIGHT_END, EC2_RIGHT, TURN_RIGHT, n)
E3S1_RIGHT_TURN = turn_road(E3_RIGHT_END, S1_RIGHT, TURN_RIGHT, n)
S1SC_RIGHT_TURN = turn_road(S1_RIGHT_END, SC_LEFT, TURN_RIGHT, n)
S2W3_RIGHT_TURN = turn_road(S2_RIGHT_END, W3_RIGHT, TURN_RIGHT, n)
W3WC2_RIGHT_TURN = turn_road(W3_RIGHT_END, WC2_LEFT, TURN_RIGHT, n)
W2WC1_RIGHT_TURN = turn_road(W2_RIGHT_END, WC1_RIGHT, TURN_RIGHT, n)
W1N2_RIGHT_TURN = turn_road(W1_RIGHT_END, N2_RIGHT, TURN_RIGHT, n)
N2NC_RIGHT_TURN = turn_road(N2_RIGHT_END, NC_LEFT, TURN_RIGHT, n)
N1E1_RIGHT_TURN = turn_road(N1_RIGHT_END, E1_RIGHT, TURN_RIGHT, n)
EC1E2_RIGHT_TURN = turn_road(EC1_RIGHT_END, E2_RIGHT, TURN_RIGHT, n)
EC2C2_RIGHT_TURN = turn_road(EC2_RIGHT_END, C2_LEFT, TURN_RIGHT, n)
EC2E3_RIGHT_TURN = turn_road(EC2_LEFT_END, E3_RIGHT, TURN_RIGHT, n)
SCS2_RIGHT_TURN = turn_road(SC_RIGHT_END, S2_RIGHT, TURN_RIGHT, n)
SCEC2_RIGHT_TURN = turn_road(SC_LEFT_END, EC2_LEFT, TURN_RIGHT, n)
WC1W1_RIGHT_TURN = turn_road(WC1_LEFT_END, W1_RIGHT, TURN_RIGHT, n)
WC1C4_RIGHT_TURN = turn_road(WC1_RIGHT_END, C4_LEFT, TURN_RIGHT, n)
WC2W2_RIGHT_TURN = turn_road(WC2_RIGHT_END, W2_RIGHT, TURN_RIGHT, n)
NCWC1_RIGHT_TURN = turn_road(NC_LEFT_END, WC1_LEFT, TURN_RIGHT, n)
NCN1_RIGHT_TURN = turn_road(NC_RIGHT_END, N1_RIGHT, TURN_RIGHT, n)
C1C2_RIGHT_TURN = turn_road(C1_RIGHT_END, C2_RIGHT, TURN_RIGHT, n)
C1NC_RIGHT_TURN = turn_road(C1_LEFT_END, NC_RIGHT, TURN_RIGHT, n)
C2C3_RIGHT_TURN = turn_road(C2_RIGHT_END, C3_RIGHT, TURN_RIGHT, n)
C2EC1_RIGHT_TURN = turn_road(C2_LEFT_END, EC1_RIGHT, TURN_RIGHT, n)
C3C4_RIGHT_TURN = turn_road(C3_RIGHT_END, C4_RIGHT, TURN_RIGHT, n)
C3SC_RIGHT_TURN = turn_road(C3_LEFT_END, SC_RIGHT, TURN_RIGHT, n)
C4C1_RIGHT_TURN = turn_road(C4_RIGHT_END, C1_RIGHT, TURN_RIGHT, n)
C4WC2_RIGHT_TURN = turn_road(C4_LEFT_END, WC2_RIGHT, TURN_RIGHT, n)

# Turn left------------------------------

E1N1_LEFT_TURN = turn_road(E1_LEFT_END, N1_LEFT, TURN_LEFT, n)
E2EC1_LEFT_TURN = turn_road(E2_LEFT_END, EC1_LEFT, TURN_LEFT, n)
E3EC3_LEFT_TURN = turn_road(E3_LEFT_END, EC2_RIGHT, TURN_LEFT, n)
S1E3_LEFT_TURN = turn_road(S1_LEFT_END, E3_LEFT, TURN_LEFT, n)
S2SC_LEFT_TURN = turn_road(S2_LEFT_END, SC_LEFT, TURN_LEFT, n)
W3S2_LEFT_TURN = turn_road(W3_LEFT_END, S2_LEFT, TURN_LEFT, n)
W2WC2_LEFT_TURN = turn_road(W2_LEFT_END, WC2_LEFT, TURN_LEFT, n)
W1WC1_LEFT_TURN = turn_road(W1_LEFT_END, WC1_RIGHT, TURN_LEFT, n)
N2W1_LEFT_TURN = turn_road(N2_LEFT_END, W1_LEFT, TURN_LEFT, n)
N1NC_LEFT_TURN = turn_road(N1_LEFT_END, NC_LEFT, TURN_LEFT, n)
EC1E1_LEFT_TURN = turn_road(EC1_RIGHT_END, E1_LEFT, TURN_LEFT, n)
EC1C2_LEFT_TURN = turn_road(EC1_LEFT_END, C2_RIGHT, TURN_LEFT, n)
EC2E2_LEFT_TURN = turn_road(EC2_LEFT_END, E2_LEFT, TURN_LEFT, n)
EC2SC_LEFT_TURN = turn_road(EC2_RIGHT_END, SC_RIGHT, TURN_LEFT, n)
SCS1_LEFT_TURN = turn_road(SC_RIGHT_END, S1_LEFT, TURN_LEFT, n)
SCC3_LEFT_TURN = turn_road(SC_LEFT_END, C3_RIGHT, TURN_LEFT, n)
WC1W2_LEFT_TURN = turn_road(WC1_LEFT_END, W2_LEFT, TURN_LEFT, n)
WC1NC_LEFT_TURN = turn_road(WC1_RIGHT_END, NC_RIGHT, TURN_LEFT, n)
WC2W3_LEFT_TURN = turn_road(WC2_RIGHT_END, W3_LEFT, TURN_LEFT, n)
WC2C4_LEFT_TURN = turn_road(WC2_LEFT_END, C4_RIGHT, TURN_LEFT, n)
NCN2_LEFT_TURN = turn_road(NC_RIGHT_END, N2_LEFT, TURN_LEFT, n)
NCC1_LEFT_TURN = turn_road(NC_LEFT_END, C1_RIGHT, TURN_LEFT, n)
C1C4_LEFT_TURN = turn_road(C1_LEFT_END, C4_LEFT, TURN_LEFT, n)
C2EC2_LEFT_TURN = turn_road(C2_RIGHT_END, EC2_LEFT, TURN_LEFT, n)
C2C1_LEFT_TURN = turn_road(C2_LEFT_END, C1_LEFT, TURN_LEFT, n)
C3C2_LEFT_TURN = turn_road(C3_LEFT_END, C2_LEFT, TURN_LEFT, n)
C4WC1_LEFT_TURN = turn_road(C4_RIGHT_END, WC1_LEFT, TURN_LEFT, n)
C4C3_LEFT_TURN = turn_road(C4_LEFT_END, C3_LEFT, TURN_LEFT, n)

sim.create_roads([
    E1_INBOUND, #0
    E1_OUTBOUND, #1
    E2_INBOUND, #2
    E2_OUTBOUND, #3
    E3_INBOUND, #4
    E3_OUTBOUND, #5

    S1_INBOUND, #6
    S1_OUTBOUND, #7
    S2_INBOUND, #8
    S2_OUTBOUND, #9

    W1_INBOUND, #10
    W1_OUTBOUND, #11
    W2_INBOUND, #12
    W2_OUTBOUND, #13
    W3_INBOUND, #14
    W3_OUTBOUND, #15

    N1_INBOUND, #16
    N1_OUTBOUND, #17
    N2_INBOUND, #18
    N2_OUTBOUND, #19

    C1_INBOUND, #20
    C1_OUTBOUND, #21
    C2_INBOUND, #22
    C2_OUTBOUND, #23
    C3_INBOUND, #24
    C3_OUTBOUND, #25
    C4_INBOUND, #26
    C4_OUTBOUND, #27

    EC1_INBOUND, #28
    EC1_OUTBOUND, #29
    EC2_INBOUND, #30
    EC2_OUTBOUND, #31

    SC_INBOUND, #32
    SC_OUTBOUND, #33

    WC1_INBOUND, #34
    WC1_OUTBOUND, #35
    WC2_INBOUND, #36
    WC2_OUTBOUND, #37

    NC_INBOUND, #38
    NC_OUTBOUND, #39

    E1E2_RIGHT_STRAIGHT, #40
    E2E3_RIGHT_STRAIGHT, #41
    S1S2_RIGHT_STRAIGHT, #42
    W3W2_RIGHT_STRAIGHT, #43
    W2W1_RIGHT_STRAIGHT, #44
    N2N1_RIGHT_STRAIGHT, #45
    C1EC1_RIGHT_STRAIGHT, #46
    C2SC_RIGHT_STRAIGHT, #47
    C3WC2_RIGHT_STRAIGHT, #48
    C4NC_RIGHT_STRAIGHT, #49
    EC2C3_RIGHT_STRAIGHT, #50
    WC1C1_RIGHT_STRAIGHT, #51

    NCC4_LEFT_STRAIGHT, #52
    E2E1_LEFT_STRAIGHT, #53
    E3E2_LEFT_STRAIGHT, #54
    S2S1_LEFT_STRAIGHT, #55
    W1W2_LEFT_STRAIGHT, #56
    W2W3_LEFT_STRAIGHT, #57
    N1N2_LEFT_STRAIGHT, #58
    C1WC1_LEFT_STRAIGHT, #59
    C3EC2_LEFT_STRAIGHT, #60
    EC1C1_LEFT_STRAIGHT, #61
    WC2C3_LEFT_STRAIGHT, #62
    SCC2_LEFT_STRAIGHT, #63

    *E1EC1_RIGHT_TURN, # 0n
    *E2EC2_RIGHT_TURN, # 1n
    *E3S1_RIGHT_TURN, # 2n
    *S1SC_RIGHT_TURN, # 3n
    *S2W3_RIGHT_TURN, # 4n
    *W3WC2_RIGHT_TURN, # 5n
    *W2WC1_RIGHT_TURN, # 6n
    *W1N2_RIGHT_TURN, # 7n
    *N2NC_RIGHT_TURN, # 8n
    *N1E1_RIGHT_TURN, # 9n
    *EC1E2_RIGHT_TURN, # 10n
    *EC2C2_RIGHT_TURN, # 11n
    *EC2E3_RIGHT_TURN, # 12n
    *SCS2_RIGHT_TURN, # 13n
    *SCEC2_RIGHT_TURN, # 14n
    *WC1W1_RIGHT_TURN, # 15n
    *WC1C4_RIGHT_TURN, # 16n
    *WC2W2_RIGHT_TURN, # 17n
    *NCN1_RIGHT_TURN, # 18n
    *NCWC1_RIGHT_TURN, # 19n
    *C1C2_RIGHT_TURN, # 20n
    *C1NC_RIGHT_TURN, # 21n
    *C2C3_RIGHT_TURN, # 22n
    *C2EC1_RIGHT_TURN, # 23n
    *C3C4_RIGHT_TURN, # 24n
    *C3SC_RIGHT_TURN, # 25n
    *C4C1_RIGHT_TURN, # 26n
    *C4WC2_RIGHT_TURN, # 27n

    *E1N1_LEFT_TURN, # 28n
    *E2EC1_LEFT_TURN, # 29n
    *E3EC3_LEFT_TURN, # 30n
    *S1E3_LEFT_TURN, # 31n
    *S2SC_LEFT_TURN, # 32n
    *W3S2_LEFT_TURN, # 33n
    *W2WC2_LEFT_TURN, # 34n
    *W1WC1_LEFT_TURN, # 35n
    *N2W1_LEFT_TURN, # 36n
    *N1NC_LEFT_TURN, # 37n
    *EC1E1_LEFT_TURN, # 38n
    *EC1C2_LEFT_TURN, # 39n
    *EC2E2_LEFT_TURN, # 40n
    *EC2SC_LEFT_TURN, # 41n
    *SCS1_LEFT_TURN, # 42n
    *SCC3_LEFT_TURN, # 43n
    *WC1W2_LEFT_TURN, # 44n
    *WC1NC_LEFT_TURN, # 45n
    *WC2W3_LEFT_TURN, # 46n
    *WC2C4_LEFT_TURN, # 47n
    *NCN2_LEFT_TURN, # 48n
    *NCC1_LEFT_TURN, # 49n
    *C1C4_LEFT_TURN, # 50n
    *C2EC2_LEFT_TURN, # 51n
    *C2C1_LEFT_TURN, # 52n
    *C3C2_LEFT_TURN, # 53n
    *C4WC1_LEFT_TURN, # 54n
    *C4C3_LEFT_TURN, # 55n
])

def road(a):
    if isinstance(a, int):
        return list(range(a, a + n))
    elif isinstance(a, list):
        return a
    else:
        raise TypeError("Input should be either an integer or a list")

sim.create_gen({
'vehicle_rate': VEHICLE_RATE,
'vehicles':[
    [1, {'path': [0, *road([40, 2, 41, 4, *road(NUM_OF_ROADS+2*n), 6, 42]), 8]}],
    [1, {'path': [9, *road([55, 7, *road(NUM_OF_ROADS+31*n), 5, 54, 3, 53]), 1]}],
    [1, {'path': [17, *road([58, 19, *road(NUM_OF_ROADS+36*n), 11, 56, 13, 57]), 15]}],
    [1, {'path': [14, *road([43, 12, 44, 10, *road(NUM_OF_ROADS+7*n), 18, 45]), 16]}],
    [2, {'path': [0, *road([*road(int(NUM_OF_ROADS+1)), 29, *road(NUM_OF_ROADS+39*n), 22, *road(NUM_OF_ROADS+22*n), 24, 48, 36, *road(NUM_OF_ROADS+46*n)]), 15]}],
    [2, {'path': [9, *road([*road(NUM_OF_ROADS+32*n), 33, *road(NUM_OF_ROADS+14*n), 31, *road(NUM_OF_ROADS+40*n), 3, 53]), 1]}],
    [2, {'path': [17, *road([*road(NUM_OF_ROADS+37*n), 39, *road(NUM_OF_ROADS+19*n), 35, *road(NUM_OF_ROADS+44*n), 13, 57]), 15]}],
    [2, {'path': [14, *road([*road(NUM_OF_ROADS+5*n), 37, *road(NUM_OF_ROADS+47*n), 26, *road(NUM_OF_ROADS+26*n), 20, 46, 28, *road(NUM_OF_ROADS+38*n)]), 1]}],
]})

win = Window(sim)
win.zoom = 10
if(sim.isPaused == False):
    win.run(steps_per_update=STEPS_PER_UPDATE)